/*
 * Copyright 2012 Dominic Spill
 *
 * This file is part of Project Ubertooth.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */


#ifndef __BLUETOOTH_H
#define __BLUETOOTH_H

#include "ubertooth.h"
#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#define MAX_SYNCWORD_ERRS 5

extern bdaddr   target;
extern uint64_t syncword;
extern bool     afh_enabled;
extern bool     afh_map[10];
extern uint8_t  used_channels;

/* Barker distance/correct gains us very little when sniffing a known AC
static const uint8_t ao_barker_distance[] = {
	3,2,3,3,2,1,3,2,2,1,3,2,1,0,2,1,3,3,2,3,3,2,3,3,3,2,3,3,2,1,3,2, //0x00-0x1f
	3,3,2,3,3,2,3,3,3,2,3,3,2,1,3,2,2,3,1,2,3,3,2,3,3,3,2,3,3,2,3,3, //0x20-0x3f
	3,3,2,3,3,2,3,3,3,2,3,3,2,1,3,2,2,3,1,2,3,3,2,3,3,3,2,3,3,2,3,3, //0x40-0x5f
	2,3,1,2,3,3,2,3,3,3,2,3,3,2,3,3,1,2,0,1,2,3,1,2,2,3,1,2,3,3,2,3};//0x60-0x7f

static const uint8_t ao_barker_correct[] = {
	0x0d, 0x0d, 0x72, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d,
	0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x72, 0x0d, 0x72, 0x72, 0x0d, 0x0d,
	0x72, 0x0d, 0x0d, 0x0d, 0x72, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x72,
	0x0d, 0x72, 0x72, 0x0d, 0x0d, 0x72, 0x0d, 0x0d, 0x0d, 0x72, 0x0d,
	0x0d, 0x0d, 0x0d, 0x0d, 0x72, 0x72, 0x72, 0x72, 0x72, 0x0d, 0x72,
	0x72, 0x72, 0x0d, 0x72, 0x72, 0x0d, 0x0d, 0x72, 0x0d, 0x72, 0x0d,
	0x72, 0x72, 0x0d, 0x0d, 0x72, 0x0d, 0x0d, 0x0d, 0x72, 0x0d, 0x0d,
	0x0d, 0x0d, 0x0d, 0x72, 0x72, 0x72, 0x72, 0x72, 0x0d, 0x72, 0x72,
	0x72, 0x0d, 0x72, 0x72, 0x0d, 0x0d, 0x72, 0x0d, 0x72, 0x72, 0x72,
	0x72, 0x72, 0x0d, 0x72, 0x72, 0x72, 0x0d, 0x72, 0x72, 0x0d, 0x0d,
	0x72, 0x0d, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72,
	0x72, 0x72, 0x72, 0x72, 0x0d, 0x72, 0x72};
*/

void precalc();
uint16_t next_hop(uint32_t clkn);
int find_access_code(uint8_t* idle_rxbuf);
void whiten(bool* input, bool* output, uint32_t clkn, size_t length, size_t skip);

#endif /* __BLUETOOTH_H */
